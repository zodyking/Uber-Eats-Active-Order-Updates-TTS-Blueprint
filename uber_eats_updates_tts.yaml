blueprint:
  name: Uber Eats Active Order Updates TTS Blueprint
  description: >-
    ### Uber Eats Active Order Updates TTS Blueprint

    ![Uber Eats Banner](https://raw.githubusercontent.com/zodyking/uber-eats-order-tracker/main/image.png)

    This blueprint creates an automation that announces changes to Uber Eats order sensors when an active order is detected.  
    It triggers on updates to order stage, driver name, driver ETA/ETT, driver location, a periodic delivery-updates timer, and active order status,  
    and uses TTS to speak customized messages.

    **Version:** 1.3.1

    **Key Features:**  
    * Announces new orders with restaurant name.  
    * Announces when a driver is assigned.  
    * Announces order stage changes (picked up, en route, arriving, delivered).  
    * Delivery updates driven by a configurable time pattern (minutes).  
    * Location update announcements with cross street + borough/quarter + suburb, with robust filtering so you don’t hear “No Driver Assigned / No ETT Available”.  
    * Queued mode to avoid overlapping TTS playback.

    **Requirements:**  
    * Uber Eats Order Tracking integration installed and configured.  
    * A TTS engine configured in Home Assistant (e.g., Google Translate TTS).  
    * Media player entities to play announcements.

    **Notes:**  
    * HA blueprints do **not** support filtering entity pickers by label; select the right “Uber Eats” entities manually.  
    * Ensure your Uber Eats sensors update their **state** (not only attributes).

  domain: automation

  input:
    # General
    user_name:
      name: User Name
      description: The user's name to include in TTS messages (e.g., Brandon)
      selector:
        text:

    # Active order binary sensor
    active_order_sensor:
      name: Active Order Binary Sensor
      description: Must reflect if there is an active order.
      selector:
        entity:
          domain: binary_sensor

    # Core stage/name sensors
    order_stage_sensor:
      name: Order Stage Sensor
      description: Uber Eats order stage (e.g., picked up, en route, arriving, delivered)
      selector:
        entity:
          domain: sensor

    driver_name_sensor:
      name: Driver Name Sensor
      description: Uber Eats driver name
      selector:
        entity:
          domain: sensor

    # ETA / ETT + restaurant
    driver_eta_sensor:
      name: Driver ETA Sensor
      description: e.g., "5:42 PM"
      selector:
        entity:
          domain: sensor

    driver_ett_sensor:
      name: Driver ETT (Minutes Remaining) Sensor
      description: e.g., "12 minutes"
      selector:
        entity:
          domain: sensor

    restaurant_name_sensor:
      name: Restaurant Name Sensor
      selector:
        entity:
          domain: sensor

    # Location group
    driver_location_sensor:
      name: Driver Location Sensor (Address/Cross-Street)
      selector:
        entity:
          domain: sensor

    driver_street_sensor:
      name: Driver Street Sensor
      selector:
        entity:
          domain: sensor

    driver_quarter_sensor:
      name: Driver Borough/Quarter Sensor
      selector:
        entity:
          domain: sensor

    driver_suburb_sensor:
      name: Driver Suburb Sensor
      selector:
        entity:
          domain: sensor

    latest_arrival_sensor:
      name: Latest Arrival Sensor
      selector:
        entity:
          domain: sensor

    # Delivery updates cadence (time_pattern)
    delivery_updates_minutes:
      name: Delivery Updates Interval (minutes)
      description: How often to announce delivery updates (time pattern trigger).
      default: 2
      selector:
        number:
          min: 1
          max: 30
          step: 1
          mode: slider
          unit_of_measurement: minutes

    # TTS / media
    tts_players:
      name: TTS Media Players
      description: The media players to play announcements on.
      selector:
        entity:
          domain: media_player
          multiple: true

    tts_engine:
      name: TTS Engine
      selector:
        entity:
          domain: tts

    tts_volume:
      name: TTS Volume
      description: Volume level for the media players (0.0 to 1.0)
      default: 0.3
      selector:
        number:
          min: 0.0
          max: 1.0
          step: 0.01
          mode: slider

# -------------------- TRIGGERS --------------------
trigger:
  - entity_id: !input order_stage_sensor
    trigger: state
    id: order_stage_change

  - entity_id: !input driver_name_sensor
    trigger: state
    id: driver_name_change

  - entity_id: !input driver_location_sensor
    trigger: state
    id: driver_location_change

  - entity_id: !input active_order_sensor
    trigger: state
    id: active_order_change

  - alias: Delivery Updates
    trigger: time_pattern
    id: Delivery_Updates
    minutes: !input delivery_updates_minutes

# -------------------- GUARD --------------------
condition:
  - condition: state
    entity_id: !input active_order_sensor
    state: "on"

# -------------------- ACTIONS --------------------
action:
  - variables:
      user_name: !input user_name
      order_stage_sensor: !input order_stage_sensor
      driver_name_sensor: !input driver_name_sensor
      driver_eta_sensor: !input driver_eta_sensor
      driver_ett_sensor: !input driver_ett_sensor
      restaurant_name_sensor: !input restaurant_name_sensor
      latest_arrival_sensor: !input latest_arrival_sensor
      active_order_sensor: !input active_order_sensor
      driver_location_sensor: !input driver_location_sensor
      driver_street_sensor: !input driver_street_sensor
      driver_quarter_sensor: !input driver_quarter_sensor
      driver_suburb_sensor: !input driver_suburb_sensor
      tts_players: !input tts_players
      tts_engine: !input tts_engine

  - action: media_player.volume_set
    data:
      volume_level: !input tts_volume
    target:
      entity_id: !input tts_players

  - choose:
      # New Active Order
      - conditions:
          - condition: trigger
            id: active_order_change
          - condition: template
            value_template: "{{ states(active_order_sensor) != 'off' }}"
        sequence:
          - action: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ('A new ' ~ states(restaurant_name_sensor) ~ ' order received for ' ~ user_name) | string }}
        alias: New Active Order Detected

      # Driver Assigned
      - conditions:
          - condition: trigger
            id: driver_name_change
          - condition: template
            value_template: "{{ states(driver_name_sensor) != 'No Driver Assigned' }}"
        sequence:
          - action: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ( user_name ~ ', ' ~ states(driver_name_sensor) ~ ' has been assigned to your ' ~ states(restaurant_name_sensor) ~ ' Uber Eats order.') | string }}
        alias: Driver Assigned To Order

      # Picked Up
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none and trigger.from_state.state != trigger.to_state.state and trigger.to_state.state == 'picked up' }}
        sequence:
          - action: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~ ' order has been picked up by ' ~ states(driver_name_sensor) | string }}
        alias: If Order Stage = Picked Up

      # En Route
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none and trigger.from_state.state != trigger.to_state.state and trigger.to_state.state == 'en route' }}
        sequence:
          - action: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~ ' order is now on its way to you with ' ~ states(driver_name_sensor) | string }}
        alias: If Order Stage = En Route

      # Arriving
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none and trigger.from_state.state != trigger.to_state.state and trigger.to_state.state == 'arriving' }}
        sequence:
          - action: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~ ' order is nearby with ' ~ states(driver_name_sensor) | string }}
        alias: If Order Stage = Arriving

      # Delivered
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none and trigger.from_state.state != trigger.to_state.state and trigger.to_state.state == 'delivered' }}
        sequence:
          - action: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~ ' order has arrived, please meet your driver, ' ~ states(driver_name_sensor) | string }}
        alias: If Order Stage = Delivered

      # Delivery / Location Updates (time pattern OR location change)
      - conditions:
          - condition: trigger
            id:
              - driver_location_change
              - Delivery_Updates
          - condition: template
            # UI-safe single line
            value_template: >-
              {{ (states(restaurant_name_sensor)|trim != 'No Restaurant') and (states(driver_street_sensor)|trim != 'No Driver Assigned') and (states(driver_quarter_sensor)|trim != 'No Driver Assigned') and (states(driver_suburb_sensor)|trim != 'No Driver Assigned') and (states(driver_ett_sensor)|trim not in ['No ETT Available','0 minutes']) and (states(driver_eta_sensor)|trim != 'No ETT Available') }}
        sequence:
          - action: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ( user_name ~ '. your ' ~ states(restaurant_name_sensor) ~ ' order is on the move, last location ' ~
                   states(driver_street_sensor) ~ ', in ' ~ states(driver_quarter_sensor) ~ ', ' ~ states(driver_suburb_sensor) ~
                   '. Estimated arrival in ' ~ states(driver_ett_sensor) ~ ' at ' ~ states(driver_eta_sensor) ) | string }}
        alias: Delivery Updates

    default: []

mode: queued
max: 4
