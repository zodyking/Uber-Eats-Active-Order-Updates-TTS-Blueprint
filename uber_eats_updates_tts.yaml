blueprint:
  name: Uber Eats Active Order Updates TTS Blueprint
  description: >-
    ### Uber Eats Active Order Updates TTS Blueprint

    ![Uber Eats Banner](https://raw.githubusercontent.com/zodyking/uber-eats-order-tracker/main/image.png)

    This blueprint creates an automation that announces changes to Uber Eats order sensors when an active order is detected.  
    It triggers on updates to order stage, driver name, driver ETA, driver location, and active order status,  
    and uses TTS to speak customized messages.

    **Version:** 1.2  

    **Key Features:**  

    * Announces new orders with restaurant name.  

    * Announces when a driver is assigned.  

    * Announces order stage changes (picked up, en route, arriving, delivered).  

    * Announces driver location updates with cross street and estimated minutes remaining (includes an adjustable delay to avoid frequent announcements).  

    * Queued mode to avoid overlapping TTS playback.  

    **Requirements:**  

    * Uber Eats Order Tracking integration installed and configured.  

    * A TTS engine configured in Home Assistant (e.g., Google Translate TTS).  

    * Media player entities (e.g., `media_player.brandons_bedroom`) to play announcements.  

    **Important Notes:**  

    * The blueprint exposes inputs (entity IDs / TTS engine / media players / volume / delay) that must be filled when creating the automation from the blueprint.  

    * Ensure your Uber Eats sensors update their **state** (not only attributes) — this blueprint uses `trigger: state` triggers.  

    * The driver-location delay is adjustable to reduce announcement spam; tune as desired.  

    * This description block is informational only — the automation logic below remains unchanged.  

  domain: automation

  input:
    user_name:
      name: User Name
      description: The user's name to include in TTS messages (e.g., Brandon)
      selector:
        text:
    active_order_sensor:
      name: Active Order Binary Sensor
      description: The binary sensor for active order
      selector:
        entity:
          domain: binary_sensor
    order_stage_sensor:
      name: Order Stage Sensor
      selector:
        entity:
          domain: sensor
    driver_name_sensor:
      name: Driver Name Sensor
      selector:
        entity:
          domain: sensor
    driver_eta_sensor:
      name: Driver ETA Sensor
      selector:
        entity:
          domain: sensor
    restaurant_name_sensor:
      name: Restaurant Name Sensor
      selector:
        entity:
          domain: sensor
    driver_location_sensor:
      name: Driver Location Sensor
      selector:
        entity:
          domain: sensor
    latest_arrival_sensor:
      name: Latest Arrival Sensor
      selector:
        entity:
          domain: sensor
    tts_players:
      name: TTS Media Players
      description: The media players to play announcements on.
      selector:
        entity:
          domain: media_player
          multiple: true
    tts_engine:
      name: TTS Engine
      selector:
        entity:
          domain: tts
    tts_volume:
      name: TTS Volume
      description: Volume level for the media players (0.0 to 1.0)
      default: 0.3
      selector:
        number:
          min: 0.0
          max: 1.0
          step: 0.01
          mode: slider
    location_delay_seconds:
      name: Driver Location Update Delay (seconds)
      description: Delay before announcing driver location updates to avoid spam.
      default: 60
      selector:
        number:
          min: 0
          max: 300
          step: 10
          unit_of_measurement: seconds

trigger:
  - entity_id: !input order_stage_sensor
    trigger: state
    id: order_stage_change
  - entity_id: !input driver_name_sensor
    trigger: state
    id: driver_name_change
  - entity_id: !input driver_eta_sensor
    trigger: state
    id: driver_eta_change
  - entity_id: !input driver_location_sensor
    trigger: state
    id: driver_location_change
  - trigger: state
    entity_id: !input active_order_sensor
    id: active_order_change

condition:
  - condition: state
    entity_id: !input active_order_sensor
    state: "on"

action:
  - variables:
      user_name: !input user_name
      order_stage_sensor: !input order_stage_sensor
      driver_name_sensor: !input driver_name_sensor
      driver_eta_sensor: !input driver_eta_sensor
      restaurant_name_sensor: !input restaurant_name_sensor
      driver_location_sensor: !input driver_location_sensor
      latest_arrival_sensor: !input latest_arrival_sensor
      active_order_sensor: !input active_order_sensor
      tts_players: !input tts_players
      tts_engine: !input tts_engine
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: !input tts_volume
    target:
      entity_id: !input tts_players
  - choose:
      - conditions:
          - condition: trigger
            id:
              - active_order_change
          - condition: template
            value_template: "{{ states(active_order_sensor) != 'off' }}"
        sequence:
          - target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ('A new ' ~ states(restaurant_name_sensor) ~ ' order received
                for ' ~ user_name) | string }}
            action: tts.speak
        alias: New Active Order Detected
      - conditions:
          - condition: trigger
            id: driver_name_change
          - condition: template
            value_template: "{{ states(driver_name_sensor) != 'No Driver Assigned' }}"
        sequence:
          - target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ( user_name ~ ', ' ~ states(driver_name_sensor) ~ ' has been
                assigned to your ' ~ states(restaurant_name_sensor) ~ ' Uber Eats
                order.') | string }}
            action: tts.speak
        alias: Driver Assigned To Order
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none
              and trigger.from_state.state != trigger.to_state.state and
              trigger.to_state.state == 'picked up' }}
        sequence:
          - target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~ '
                order has been picked up by ' ~ states(driver_name_sensor)
                | string }}
            action: tts.speak
        alias: If Order Stage = Picked Up
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none
              and trigger.from_state.state != trigger.to_state.state and
              trigger.to_state.state == 'en route' }}
        sequence:
          - target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~ '
                order is now on its way to you with ' ~
                states(driver_name_sensor) | string }}
            action: tts.speak
        alias: If Order Stage = En Route
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none
              and trigger.from_state.state != trigger.to_state.state and
              trigger.to_state.state == 'arriving' }}
        sequence:
          - target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~ '
                order is nearby with ' ~ states(driver_name_sensor) | string
                }}
            action: tts.speak
        alias: If Order Stage = Arriving
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none
              and trigger.from_state.state != trigger.to_state.state and
              trigger.to_state.state == 'delivered' }}
        sequence:
          - target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~ '
                order has arrived, please meet your driver, ' ~
                states(driver_name_sensor) | string }}
            action: tts.speak
        alias: If Order Stage = Delivered
      - conditions:
          - condition: trigger
            id: driver_location_change
          - condition: template
            value_template: >-
              {{ states(driver_location_sensor) not in ['No Active Order',
              'unknown',
              'none', ''] and states(order_stage_sensor) !=
              'delivered' }}
        sequence:
          - variables:
              minutes_remaining: |
                {% set eta_str = states(driver_eta_sensor) | default('') %}
                {% set current_now = now() %}
                {% set eta_time = strptime(eta_str, '%I:%M %p') if eta_str else none %}
                {% if eta_time %}
                  {% set eta_datetime = current_now.replace(hour=eta_time.hour, minute=eta_time.minute, second=0, microsecond=0) %}
                  {% if eta_datetime < current_now %}
                    {% set eta_datetime = eta_datetime + timedelta(days=1) %}
                  {% endif %}
                  {% set minutes_remaining = ((eta_datetime - current_now).total_seconds() / 60) | round(0) | int %}
                  {{ minutes_remaining }}
                {% else %}
                  0
                {% endif %}
          - delay:
              seconds: !input location_delay_seconds
          - target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ( user_name ~ '. ' ~ states(driver_name_sensor) ~ ' was last
                seen near ' ~ states(driver_location_sensor) ~ ' and will arrive in ' ~ minutes_remaining ~ ' minutes.') | string }}
            action: tts.speak
        alias: If Driver Location Updates
    default: []
mode: queued
max: 4
