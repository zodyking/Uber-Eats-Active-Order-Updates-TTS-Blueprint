blueprint:
  name: Uber Eats Active Order Updates TTS (fixed)
  description: >-
  ### Uber Eats Active Order Updates TTS Blueprint

    ![Uber Eats Banner](https://raw.githubusercontent.com/zodyking/uber-eats-order-tracker/main/image.png)

    Welcome to the **Uber Eats Active Order Updates TTS Blueprint**, a stylish and functional automation designed to enhance your Home Assistant experience by announcing real-time updates for your Uber Eats orders. This blueprint leverages Text-to-Speech (TTS) to notify you of key order changes, ensuring you're always in the loop with a seamless voice experience.

    #### Features
    - üéâ **New Order Alerts**: Get notified when a new order is placed with the restaurant name.
    - üöö **Driver Assignment**: Hear when a driver is assigned to your order.
    - üìÖ **Stage Updates**: Stay updated on order stages (e.g., preparing, en route).
    - ‚è∞ **ETA Notifications**: Receive ETA and latest arrival time updates.
    - üìç **Location Tracking**: Announces driver location updates (with a 30-second delay to avoid spam).

    #### Requirements
    - üì¶ **Uber Eats Order Tracking Integration**: Must be installed and configured (available via HACS or manually).
    - üîä **TTS Setup**: A working TTS engine (e.g., Google Translate TTS) and a media player entity.

    #### How to Use
    1. **Install the Blueprint**:
       - Click the button below to import this blueprint into your Home Assistant instance:
       - [Add to my Home Assistant](https://my.home-assistant.io/redirect/blueprint_import/?blueprint_url=https%3A%2F%2Fgist.githubusercontent.com%2Fzodyking%2Fyourgistid%2Fraw%2Fuber_eats_updates_tts.yaml)
       - Alternatively, copy this YAML into **Settings > Automations & Scenes > Blueprints > Import Blueprint**.
    2. **Configure Inputs**:
       - **User Name**: Enter your name for personalized messages.
       - **Sensors**: Select the corresponding Uber Eats sensor entities from your integration.
       - **TTS Player**: Choose your media player (e.g., a smart speaker).
       - **TTS Engine**: Select your TTS service (e.g., tts.google_translate_en_com).
    3. **Test**:
       - Place an Uber Eats order and verify announcements trigger as expected.
       - Adjust entity IDs if needed via the blueprint configuration.

    #### Notes
    - ‚ö†Ô∏è **Queue Mode**: Updates are queued to prevent overlap.
    - üé® **Customization**: Tailor entity IDs and messages to your setup.
    - ‚úÖ **Optimization**: Ensure sensors update correctly during active orders for best results.

  d
  domain: automation

  input:
    user_name:
      name: User Name
      description: The user's name to include in TTS messages (e.g., Brandon)
      selector:
        text:
    active_order_sensor:
      name: Active Order Binary Sensor
      description: The binary sensor for active order
      selector:
        entity:
          domain: binary_sensor
    order_stage_sensor:
      name: Order Stage Sensor
      selector:
        entity:
          domain: sensor
    driver_name_sensor:
      name: Driver Name Sensor
      selector:
        entity:
          domain: sensor
    driver_eta_sensor:
      name: Driver ETA Sensor
      selector:
        entity:
          domain: sensor
    restaurant_name_sensor:
      name: Restaurant Name Sensor
      selector:
        entity:
          domain: sensor
    driver_location_sensor:
      name: Driver Location Sensor
      selector:
        entity:
          domain: sensor
    latest_arrival_sensor:
      name: Latest Arrival Sensor
      selector:
        entity:
          domain: sensor
    tts_player:
      name: TTS Media Player
      selector:
        entity:
          domain: media_player
    tts_engine:
      name: TTS Engine
      selector:
        entity:
          domain: tts

trigger:
  - entity_id: !input order_stage_sensor
    trigger: state
    id: order_stage_change
  - entity_id: !input driver_name_sensor
    trigger: state
    id: driver_name_change
  - entity_id: !input driver_eta_sensor
    trigger: state
    id: driver_eta_change
  - entity_id: !input restaurant_name_sensor
    trigger: state
    id: restaurant_name_change
  - entity_id: !input driver_location_sensor
    trigger: state
    id: driver_location_change

condition:
  - condition: state
    entity_id: !input active_order_sensor
    state: "on"

action:
  # expose blueprint inputs at runtime as variables (safe to reference in templates)
  - variables:
      user_name: !input user_name
      order_stage_sensor: !input order_stage_sensor
      driver_name_sensor: !input driver_name_sensor
      driver_eta_sensor: !input driver_eta_sensor
      restaurant_name_sensor: !input restaurant_name_sensor
      driver_location_sensor: !input driver_location_sensor
      latest_arrival_sensor: !input latest_arrival_sensor
      tts_player: !input tts_player
      tts_engine: !input tts_engine

  - choose:
      - conditions:
          - condition: trigger
            id: restaurant_name_change
          - condition: template
            value_template: "{{ states(restaurant_name_sensor) != 'No Restaurant' }}"
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_player
              message: "{{ ('Message from UberEats. New ' ~ states(restaurant_name_sensor) ~ ' order received for ' ~ user_name) | string }}"
        alias: If Restaurant Name Updates

      - conditions:
          - condition: trigger
            id: driver_name_change
          - condition: template
            value_template: "{{ states(driver_name_sensor) != 'No Driver Assigned' }}"
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_player
              message: "{{ (states(driver_name_sensor) ~ ' has been assigned to your ' ~ states(restaurant_name_sensor) ~ ' order.') | string }}"
        alias: If Driver Name Updates

      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            # ensure we only announce real state transitions and not placeholder states
            value_template: "{{ trigger.from_state is not none and trigger.to_state is not none and trigger.from_state.state != trigger.to_state.state and trigger.to_state.state != 'No Active Order' }}"
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_player
              message: "{{ ('Message From Uber Eats: Your ' ~ states(restaurant_name_sensor) ~ ' order is now ' ~ states(order_stage_sensor)) | string }}"
        alias: If Order Stage Updates

      - conditions:
          - condition: trigger
            id: driver_eta_change
          - condition: template
            value_template: "{{ states(driver_eta_sensor) not in ['unknown', 'none', ''] }}"
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_player
              message: "{{ ('Your ' ~ states(restaurant_name_sensor) ~ ' order is now expected to arrive at ' ~ states(driver_eta_sensor) ~ ' and no later than ' ~ states(latest_arrival_sensor)) | string }}"
        alias: If Driver ETA Updates

      - conditions:
          - condition: trigger
            id: driver_location_change
          - condition: template
            value_template: "{{ states(driver_location_sensor) not in ['No Active Order', 'unknown', 'none', ''] }}"
        sequence:
          - delay:
              seconds: 30
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_player
              message: "{{ ( 'Message From UberEats. ' ~ states(driver_name_sensor) ~ ' was last seen near ' ~ (states(driver_location_sensor) | default('')) | default('') ) | string }}"
        alias: If Driver Location Updates

    default: []

mode: queued
max: 4
