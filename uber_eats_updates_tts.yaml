blueprint:
  name: Uber Eats Active Order Updates TTS Blueprint
  description: >-
    ### Uber Eats Active Order Updates TTS Blueprint

    <img width="1460" height="461" alt="image" src="https://github.com/user-attachments/assets/38122230-aac8-4302-b67e-cb361ff19de4" />


    This blueprint creates an automation that announces changes to Uber Eats order sensors when an active order is detected.  
    It triggers on updates to order stage, driver name, ETA/ETT, location, a periodic delivery-updates timer, and active order status,  
    and uses TTS to speak customized messages.


    **Version:** 1.3.6  
    

    **Key Features:**  
    
    * Announces new orders with restaurant name.  
    
    * Announces when a driver is assigned.  
    
    * Announces order stage changes (picked up, en route, arriving, delivered).  
    
    * Delivery updates driven by a configurable time pattern (minutes).  
    
    * Location updates use Borough/Quarter + Suburb + **Driver Street** (cross-street) with robust “not No Driver/ETT/ETA” checks.  
    
    * Queued mode to avoid overlapping TTS playback.  
    

    **Requirements:**  
    
    * Uber Eats Order Tracking integration installed and configured.  
    
    * A TTS engine configured in Home Assistant (e.g., Google Translate TTS).  
    
    * Media player entities to play announcements.  
    

    **Important Notes:**  
    
    * **Driver Address Sensor** = full formatted address (e.g., “200 W 34th St, New York, NY”).
    
    * **Driver Street Sensor** = short street/cross-street label (e.g., “Atlantic Ave”) — speech prefers this.  
    
    * Ensure your Uber Eats sensors update their **state** (not only attributes).  
    

  domain: automation

  input:
    user_name:
      name: User Name
      description: The user's name to include in TTS messages (e.g., Brandon)
      selector:
        text:

    active_order_sensor:
      name: Active Order Binary Sensor
      description: Must be "on" when there is an active order.
      selector:
        entity:
          domain: binary_sensor

    order_stage_sensor:
      name: Order Stage Sensor
      description: e.g., picked up, en route, arriving, delivered
      selector:
        entity:
          domain: sensor

    driver_name_sensor:
      name: Driver Name Sensor
      selector:
        entity:
          domain: sensor

    driver_eta_sensor:
      name: Driver ETA Sensor (clock time)
      description: e.g., "5:42 PM"
      selector:
        entity:
          domain: sensor

    driver_ett_sensor:
      name: Driver ETT Sensor (minutes remaining)
      description: e.g., "12 minutes"
      selector:
        entity:
          domain: sensor

    restaurant_name_sensor:
      name: Restaurant Name Sensor
      selector:
        entity:
          domain: sensor

    latest_arrival_sensor:
      name: Latest Arrival Sensor
      selector:
        entity:
          domain: sensor

    # Location inputs (explicit)
    driver_address_sensor:
      name: Driver Address Sensor
      description: Full formatted address if available.
      selector:
        entity:
          domain: sensor

    driver_street_sensor:
      name: Driver Street Sensor
      description: Short street/cross-street label (preferred for speech).
      selector:
        entity:
          domain: sensor

    driver_quarter_sensor:
      name: Driver Borough/Quarter Sensor
      selector:
        entity:
          domain: sensor

    driver_suburb_sensor:
      name: Driver Suburb Sensor
      selector:
        entity:
          domain: sensor

    driver_county_sensor:
      name: Driver County Sensor
      selector:
        entity:
          domain: sensor

    delivery_updates_minutes:
      name: Delivery Updates Interval (minutes)
      description: How often to announce delivery updates (time-pattern trigger).
      default: 2
      selector:
        number:
          min: 1
          max: 30
          step: 1
          mode: slider
          unit_of_measurement: minutes

    tts_players:
      name: TTS Media Players
      description: Media players to play announcements on.
      selector:
        entity:
          domain: media_player
          multiple: true

    tts_engine:
      name: TTS Engine
      selector:
        entity:
          domain: tts

    tts_volume:
      name: TTS Volume
      description: Volume level for the media players (0.0 to 1.0)
      default: 0.3
      selector:
        number:
          min: 0.0
          max: 1.0
          step: 0.01
          mode: slider

trigger:
  - platform: state
    entity_id: !input order_stage_sensor
    id: order_stage_change

  - platform: state
    entity_id: !input driver_name_sensor
    id: driver_name_change

  # Location-related triggers (street/address/quarter/suburb/county)
  - platform: state
    entity_id: !input driver_street_sensor
    id: driver_street_change

  - platform: state
    entity_id: !input driver_address_sensor
    id: driver_address_change

  - platform: state
    entity_id: !input driver_quarter_sensor
    id: driver_quarter_change

  - platform: state
    entity_id: !input driver_suburb_sensor
    id: driver_suburb_change

  - platform: state
    entity_id: !input driver_county_sensor
    id: driver_county_change

  - platform: state
    entity_id: !input active_order_sensor
    id: active_order_change

  - platform: time_pattern
    id: Delivery_Updates
    minutes: /!input delivery_updates_minutes

condition:
  - condition: state
    entity_id: !input active_order_sensor
    state: "on"

action:
  - variables:
      user_name: !input user_name
      active_order_sensor: !input active_order_sensor
      order_stage_sensor: !input order_stage_sensor
      driver_name_sensor: !input driver_name_sensor
      driver_eta_sensor: !input driver_eta_sensor
      driver_ett_sensor: !input driver_ett_sensor
      restaurant_name_sensor: !input restaurant_name_sensor
      latest_arrival_sensor: !input latest_arrival_sensor

      driver_address_sensor: !input driver_address_sensor
      driver_street_sensor: !input driver_street_sensor
      driver_quarter_sensor: !input driver_quarter_sensor
      driver_suburb_sensor: !input driver_suburb_sensor
      driver_county_sensor: !input driver_county_sensor

      # Prefer short street; fallback to full address
      driver_loc_friendly: >-
        {% set street = states(driver_street_sensor) | trim %}
        {% set addr   = states(driver_address_sensor) | trim %}
        {% if street and street|lower not in ['no driver assigned','unknown','unavailable'] %}
          {{ street }}
        {% elif addr and addr|lower not in ['no active order','unknown','unavailable'] %}
          {{ addr }}
        {% else %}
          {{ street or addr }}
        {% endif %}

      tts_players: !input tts_players
      tts_engine: !input tts_engine

  - service: media_player.volume_set
    data:
      volume_level: !input tts_volume
    target:
      entity_id: !input tts_players

  - choose:
      - alias: New Active Order Detected
        conditions:
          - condition: trigger
            id: active_order_change
          - condition: template
            value_template: "{{ states(active_order_sensor) != 'off' }}"
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ('A new ' ~ states(restaurant_name_sensor) ~ ' order received for ' ~ user_name) | string }}

      - alias: Driver Assigned To Order
        conditions:
          - condition: trigger
            id: driver_name_change
          - condition: template
            value_template: "{{ states(driver_name_sensor) != 'No Driver Assigned' }}"
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ( user_name ~ ', ' ~ states(driver_name_sensor) ~ ' has been assigned to your ' ~ states(restaurant_name_sensor) ~ ' Uber Eats order.') | string }}

      - alias: If Order Stage = Picked Up
        conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none
                 and trigger.from_state.state != trigger.to_state.state
                 and trigger.to_state.state == 'picked up' }}
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~
                   ' order has been picked up by ' ~ states(driver_name_sensor) | string }}

      - alias: If Order Stage = En Route
        conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none
                 and trigger.from_state.state != trigger.to_state.state
                 and trigger.to_state.state == 'en route' }}
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~
                   ' order is now on its way to you with ' ~
                   states(driver_name_sensor) | string }}

      - alias: If Order Stage = Arriving
        conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none
                 and trigger.from_state.state != trigger_to_state.state
                 and trigger.to_state.state == 'arriving' }}
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~
                   ' order is nearby with ' ~ states(driver_name_sensor) | string }}

      - alias: If Order Stage = Delivered
        conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: >-
              {{ trigger.from_state is not none and trigger.to_state is not none
                 and trigger.from_state.state != trigger.to_state.state
                 and trigger.to_state.state == 'delivered' }}
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ user_name ~ ', Your ' ~ states(restaurant_name_sensor) ~
                   ' order has arrived, please meet your driver, ' ~
                   states(driver_name_sensor) | string }}

      - alias: Delivery Updates
        conditions:
          - condition: trigger
            id:
              - Delivery_Updates
          - condition: template
            value_template: >-
              {{ (states(restaurant_name_sensor)|trim != 'No Restaurant')
                 and (states(driver_street_sensor)|trim != 'No Driver Assigned')
                 and (states(driver_quarter_sensor)|trim != 'No Driver Assigned')
                 and (states(driver_suburb_sensor)|trim != 'No Driver Assigned')
                 and (states(driver_ett_sensor)|trim not in ['No ETT Available','0 minutes'])
                 and (states(driver_eta_sensor)|trim not in ['No ETT Available','No ETA Available']) }}
        sequence:
          - service: tts.speak
            target:
              entity_id: !input tts_engine
            data:
              media_player_entity_id: !input tts_players
              message: >-
                {{ ( user_name ~ '. your ' ~ states(restaurant_name_sensor) ~
                   ' order is on the move, last location ' ~ (driver_loc_friendly | trim) ~
                   ', in ' ~ states(driver_quarter_sensor) ~ ', ' ~ states(driver_suburb_sensor) ~
                   '. Estimated arrival in ' ~ states(driver_ett_sensor) ~
                   ' at ' ~ states(driver_eta_sensor) ) | string }}

mode: queued
max: 4
