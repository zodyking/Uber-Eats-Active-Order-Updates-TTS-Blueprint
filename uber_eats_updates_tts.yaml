blueprint:
  name: Uber Eats Active Order Updates TTS
  description: >-
    ### Uber Eats Active Order Updates TTS Blueprint
    
    ![Uber Eats Banner](https://raw.githubusercontent.com/zodyking/uber-eats-order-tracker/main/image.png)
    
    This blueprint creates an automation that announces changes to Uber Eats order sensors when an active order is detected. It triggers on updates to order stage, driver name, driver ETA, restaurant name, and driver location, and uses TTS to speak customized messages.
    
    **Features:**
    - Announces new orders with restaurant name.
    - Announces when a driver is assigned.
    - Announces order stage changes.
    - Announces ETA updates with latest arrival time.
    - Announces driver location updates with cross street (with 30-second delay to avoid frequent announcements).
    
    **Requirements:**
    - Uber Eats Order Tracking integration installed and configured.
    - TTS engine (e.g., Google Translate TTS) and media player set up.
    
    **Notes:**
    - The automation is queued to handle multiple updates without overlapping.
    - Customize entity IDs and TTS messages as needed.
    - For best results, ensure your Uber Eats sensors are updating correctly during an active order.
  domain: automation
  input:
    active_order_sensor:
      name: Active Order Binary Sensor
      description: The binary sensor for active order (e.g., binary_sensor.brandon_uber_eats_active_order)
      selector:
        entity:
          domain: binary_sensor
    order_stage_sensor:
      name: Order Stage Sensor
      description: The sensor for order stage (e.g., sensor.brandon_uber_eats_order_stage)
      selector:
        entity:
          domain: sensor
    driver_name_sensor:
      name: Driver Name Sensor
      description: The sensor for driver name (e.g., sensor.brandon_uber_eats_driver_name)
      selector:
        entity:
          domain: sensor
    driver_eta_sensor:
      name: Driver ETA Sensor
      description: The sensor for driver ETA (e.g., sensor.brandon_uber_eats_driver_eta)
      selector:
        entity:
          domain: sensor
    restaurant_name_sensor:
      name: Restaurant Name Sensor
      description: The sensor for restaurant name (e.g., sensor.brandon_uber_eats_restaurant_name)
      selector:
        entity:
          domain: sensor
    driver_location_sensor:
      name: Driver Location Sensor
      description: The sensor for driver location (e.g., sensor.brandon_uber_eats_driver_location)
      selector:
        entity:
          domain: sensor
    latest_arrival_sensor:
      name: Latest Arrival Sensor
      description: The sensor for latest arrival (e.g., sensor.brandon_uber_eats_latest_arrival)
      selector:
        entity:
          domain: sensor
    tts_player:
      name: TTS Media Player
      description: The media player for TTS (e.g., media_player.brandons_bedroom)
      selector:
        entity:
          domain: media_player
    tts_engine:
      name: TTS Engine
      description: The TTS entity (e.g., tts.google_translate_en_com)
      selector:
        entity:
          domain: tts
trigger:
  - entity_id: !input order_stage_sensor
    trigger: state
    id: order_stage_change
  - entity_id: !input driver_name_sensor
    trigger: state
    id: driver_name_change
  - entity_id: !input driver_eta_sensor
    trigger: state
    id: driver_eta_change
  - entity_id: !input restaurant_name_sensor
    trigger: state
    id: restaurant_name_change
  - entity_id: !input driver_location_sensor
    trigger: state
    id: driver_location_change
condition:
  - condition: state
    entity_id: !input active_order_sensor
    state: "on"
action:
  - choose:
      - conditions:
          - condition: trigger
            id: restaurant_name_change
          - condition: template
            value_template: "{{ states(!input restaurant_name_sensor) != 'No Restaurant' }}"
        sequence:
          - action: tts.speak
            data:
              cache: false
              message: >-
                Message from UberEats, New {{ states(!input restaurant_name_sensor) }} order received for Brandon.
              media_player_entity_id: !input tts_player
            target:
              entity_id: !input tts_engine
        alias: If Restaurant Name Updates
      - conditions:
          - condition: trigger
            id: driver_name_change
          - condition: template
            value_template: "{{ states(!input driver_name_sensor) != 'No Driver Assigned' }}"
        sequence:
          - action: tts.speak
            data:
              cache: false
              message: >-
                {{ states(!input driver_name_sensor) }} has been assigned to your {{ states(!input restaurant_name_sensor) }} order.
              media_player_entity_id: !input tts_player
            target:
              entity_id: !input tts_engine
        alias: If Driver Name Updates
      - conditions:
          - condition: trigger
            id: order_stage_change
          - condition: template
            value_template: "{{ trigger.from_state.state != trigger.to_state.state and trigger.to_state.state != 'No Active Order' }}"
        sequence:
          - action: tts.speak
            data:
              cache: false
              message: >-
                Message From Uber Eats: Your {{ states(!input restaurant_name_sensor) }} order is now, {{ states(!input order_stage_sensor) }}
              media_player_entity_id: !input tts_player
            target:
              entity_id: !input tts_engine
        alias: If Order Stage Updates
      - conditions:
          - condition: trigger
            id: driver_eta_change
          - condition: template
            value_template: "{{ states(!input driver_eta_sensor) != 'unknown' }}"
        sequence:
          - action: tts.speak
            data:
              cache: false
              message: >-
                Your {{ states(!input restaurant_name_sensor) }} order is now espected to arrive at {{ states(!input driver_eta_sensor) }} and no later than {{ states(!input latest_arrival_sensor) }}
              media_player_entity_id: !input tts_player
            target:
              entity_id: !input tts_engine
        alias: If Driver ETA Updates
      - conditions:
          - condition: trigger
            id: driver_location_change
          - condition: template
            value_template: "{{ states(!input driver_location_sensor) != 'No Active Order' and (now() - states('automation.uber_eats_active_order_updates_tts').attributes.last_triggered > timedelta(seconds=30) or states('automation.uber_eats_active_order_updates_tts').attributes.last_triggered is none) }}"
        sequence:
          - delay:
              hours: 0
              minutes: 0
              seconds: 30
              milliseconds: 0
          - action: tts.speak
            data:
              cache: false
              message: >-
                Message From UberEats. {{ states(!input driver_name_sensor) }} was last seen near {{ states(!input driver_location_sensor) | split(',') | first | strip }} with your {{ states(!input restaurant_name_sensor) }} order, and heading to you!
              media_player_entity_id: !input tts_player
            target:
              entity_id: !input tts_engine
        alias: If Driver Location Updates
    default: []
mode: queued
max: 4
